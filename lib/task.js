require('colors')
const gulp     = require('gulp');

const through2 = require(`through2`).obj;
const File     = require(`vinyl`);

const opentype = require('opentype.js');
const wawoff2  = require('wawoff2');
const ttf2woff = require('ttf2woff');

module.exports = options => callback => {

    let { taskName , src , dest } = {
        taskName : `[  ${`font`.yellow}  ]`,
        ...options
    }

    console.log(`\n${taskName} start\n`)

    let required = []
    gulp.src( src, { read:true , buffer:true } )

    .pipe( through2( 
        async function ( file, enc, cb ) {
                    
            console.log(`${taskName} convert: "${file.basename.green}"`)
            required.push(`${`//`.green}${`@require`.magenta} ${`"./${file.stem}/${file.stem}.styl"`.yellow}`)
            // ttf info parser
            var info =  opentype.parse( new Uint8Array(file.contents).buffer );
            //console.log(info)
            let os2 = info.tables.os2
            /**
                usWeightClass: 400,
                usWidthClass: 5,
            */
            let names = info.names
            /**
                fontFamily    : { en: 'Alex Brush' },
                fontSubfamily : { en: 'Regular' },
                fullName      : { en: 'Alex Brush' },
                postScriptName: { en: 'AlexBrush-Regular' },
            */
            // console.log(names)

            let font_face = `\n
            |/* autogenerated by @x-system/font-convertor */
            |@font-face {
            |    font-family : '${names.fontFamily.en}';
            |    font-weight : ${os2.usWeightClass};
            |    font-style  : normal;
            |    font-display: swap;
            |    src: local('${names.fullName.en}'), local('${names.postScriptName.en}'),
            |         url('$font/${file.stem}/${file.stem}.woff2') format('woff2'),    /* Super Modern Browsers */
            |         url('$font/${file.stem}/${file.stem}.woff')  format('woff'),     /* Modern Browsers       */
            |         url('$font/${file.stem}/${file.stem}.ttf')   format('truetype'); /* Safari, Android, iOS  */
            |}`.replace(/\s+?\|/g,"\n")

            function path(file,ext){
                let folder = file.stem;
                let path   = file.path.replace(/\\/g,"/").split("/")
                let name   = path.pop()
                let stem   = name.replace(".ttf",ext)
                path.push(folder)
                path.push(stem)
                return path.join("/")
            }

            let css = new File({
                base     : file.base,
                path     : path(file,".styl"),
                contents : Buffer.from(font_face),
            })
            this.push(css)

            let woff2 = new File({
                base     : file.base,
                path     : path(file,".woff2"),
                contents : Buffer.from( await wawoff2.compress(file.contents) ),
            })
            this.push(woff2)
            
            let woff = new File({
                base     : file.base,
                path     : path(file,".woff"),
                contents : Buffer.from( ttf2woff(  new Uint8Array(file.contents) ).buffer )
            })
            this.push(woff)

            file.path = path(file,".ttf")

            cb(null,file);

        },
        function( cb ){
            console.log(`\n${taskName} require:\n`)
            console.log(required.join("\n"))
            cb()
        }
    ))
    .pipe( gulp.dest(`${dest}`) )
    .on( 'error',  e  => console.error(e) )
    .on( 'end'  , ( ) => {
        console.log(`\n${taskName} end\n`)
        callback()
    })
}
